@page "/add-task"
@page "/add-task/{Id}"

@inject HttpClient Http
@inject NavigationManager Nav



<h3>@(IsEdit ? "Edit Task" : "Add New Task")</h3>

<EditForm Model="@task" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-2">
        <label>Title</label>
        <InputText class="form-control" @bind-Value="task.Title" required placeholder="Input Title of the Note"/>
    </div>

    <div class="mb-2">
        <label>Description</label>
        <InputTextArea class="form-control" @bind-Value="task.Description" placeholder="Short Description"/>
    </div>

    <div class="mb-2">
        <label>Temporary Deadline</label>
        <InputDate class="form-control"
                @bind-Value="task.TemporaryDeadline"
                @attributes="GetDateAttributes()" />
    </div>

    <div class="mb-2">
        <label>Actual Deadline</label>
        <InputDate class="form-control"
                @bind-Value="task.ActualDeadline"
                @attributes="GetDateAttributes()" />
    </div>

    <button class="btn btn-primary mt-2" type="submit"> @(IsEdit ? " Update Task" : " Add Task")</button>
</EditForm>

@code {
    [Parameter] public string? Id { get; set; }
    bool IsEdit => !string.IsNullOrEmpty(Id);
    TodoItem task = new();

    protected override async Task OnInitializedAsync()
    {
        if (IsEdit)
        {
            var result = await Http.GetAsync($"api/todo/{Id}");
            if (result.IsSuccessStatusCode)
            {
                task = await result.Content.ReadFromJsonAsync<TodoItem>() ?? new();
            }
            else
            {
                Nav.NavigateTo("/view-tasks"); // fallback
            }
        }
    }

    async Task HandleSubmit()
    {
        if (IsEdit)
            await Http.PutAsJsonAsync($"api/todo/{Id}", task);
        else
            await Http.PostAsJsonAsync("api/todo", task);

        Nav.NavigateTo("/view-tasks");
    }

    Dictionary<string, object> GetDateAttributes()
    {
        var today = DateTime.Now.Date;
        var maxDate = today.AddYears(5);

        return new Dictionary<string, object>
        {
            { "min", today.ToString("yyyy-MM-dd") },
            { "max", maxDate.ToString("yyyy-MM-dd") }
        };
    }
}
